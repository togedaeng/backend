# 워크플로우의 이름
name: Deploy to Server

# 워크플로우가 실행될 조건 설정
on:
  push:
    branches:
      - dev  # dev 브랜치에 push 이벤트가 발생했을 때 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # 이 작업은 우분투 최신 버전 환경에서 실행됨

    steps:
      # 1. GitHub 레포지토리의 코드를 runner로 가져옴 (체크아웃)
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # ★★★ 디버깅 단계 1 ★★★
      # 3. 파일 생성 전 디렉토리 목록 확인
      - name: Check directory before creating file
        run: ls -l ./src/main/resources/

      # 4. GitHub Secrets에 저장된 값을 이용해 서비스 계정 키 파일을 생성
      - name: Create Firebase Service Account Key file
        run: echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" > ./src/main/resources/firebase-service-account.json

      # ★★★ 디버깅 단계 2 ★★★
      # 5. 파일 생성 후 디렉토리 목록 확인 (파일이 생성되었는지, 파일 크기가 0은 아닌지 확인)
      - name: Check directory after creating file
        run: ls -l ./src/main/resources/

      # 6. Docker Hub 로그인을 위한 설정 (Docker Buildx)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 7. Docker Hub에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/togedaeng-backend:latest

      # 9. 서버에 접속하여 배포 스크립트 실행 (EC2 등)
      # - name: Deploy to EC2
      #   uses: appleboy/ssh-action@master
      #   ...
